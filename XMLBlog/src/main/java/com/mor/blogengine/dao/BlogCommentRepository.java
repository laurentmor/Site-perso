/* * Copyright (c) 2024 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * */package com.mor.blogengine.dao;//~--- non-JDK imports --------------------------------------------------------import static com.mor.blogengine.xpath.SearchCriteria.SINGLE;import com.mor.blogengine.exception.IncorrectPropertyValueException;import com.mor.blogengine.exception.MissingPropertyException;import com.mor.blogengine.exception.NoMatchesFoundException;import com.mor.blogengine.model.BlogComment;import com.mor.blogengine.xpath.SearchCriteria;import java.util.List;import java.util.Properties;import java.util.logging.Level;import java.util.logging.Logger;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.tree.DefaultElement;/** * Comment repository. * * @author laurent */public final class BlogCommentRepository extends BlogRepositoryBase    implements Repository<BlogComment, DefaultElement, SearchCriteria,                             DocumentException> {  /**   * Default constructor.   *   * @param document document instance that holds blog data   * @param config   global configuration file for application   */  public BlogCommentRepository(final Properties config,      final Document document) {    super(document, config);  }  /**   * add a comment to blog.   *   * @param t the comment to add   * @return true if comment added correctly   */  @Override  public boolean add(final BlogComment t) {    return false;  }  /**   * append a comment to a parent entry to a blog.   *   * @param what     the comment to append   * @param parentId the ID of parent entry to append to   * @return true if Category appended correctly   */  @Override  public boolean append(final BlogComment what, final String parentId)      throws NoMatchesFoundException {    try {      trace("Appending element... " + what.getCommentText());    } catch (MissingPropertyException | IncorrectPropertyValueException ex) {      Logger.getLogger(BlogCommentRepository.class.getName())          .log(Level.SEVERE, null, ex);    }    List<DefaultElement> foundList = getSearchEngine()                                         .getElementsForCriteria("Entry",                                             SINGLE,                                             parentId);    try {      DefaultElement relatedEntry = foundList.getFirst();      return getHandler().append(relatedEntry, what.toElement());    } catch (Exception ex) {      try {        trace(ex.getMessage());      } catch (MissingPropertyException | IncorrectPropertyValueException ex1) {        Logger.getLogger(BlogCommentRepository.class.getName())            .log(Level.SEVERE, null, ex1);      }    }    throw new NoMatchesFoundException();  }  /**   * append an element to a parent one to a blog.   *   * @param what the element to append   * @return true if element appended correctly   */  @Override  public boolean append(final BlogComment what) throws DocumentException {    return false;  }  /**   * remove a comment to blog.   *   * @param t the comment to remove   * @return true if Comment removed correctly   */  @Override  public boolean remove(final BlogComment t) throws NoMatchesFoundException {    List<DefaultElement> list = getElementsForCriteria(SINGLE, t.getEntityiD());    return getHandler().remove(list.getFirst(), t.getEntryId());  }  /**   * edit a comment in a blog.   *   * @param t  the comment to edit   * @param t2 the new comment   * @return true if Comment edited correctly   */  @Override  public boolean edit(final BlogComment t, final BlogComment t2)      throws NoMatchesFoundException {    boolean removed = remove(t);    boolean appended = append(t2, t2.getEntryId());    return removed && appended;  }  /**   * Enable the search for comment and criteria in XML. <br/>   *   * @param sc         what to search<br/>   * @param paramValue search for what criteria<br/>   * @return list of results<br/>   */  @Override  public List<DefaultElement> getElementsForCriteria(final SearchCriteria sc,      final String paramValue)      throws NoMatchesFoundException {    List<DefaultElement> list = getSearchEngine()                                    .getElementsForCriteria("Comment",                                        sc, paramValue);    if (list == null) {      throw new NoMatchesFoundException();    }    return list;  }}