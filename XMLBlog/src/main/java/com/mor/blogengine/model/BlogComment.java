/** * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.mor.blogengine.model;//~--- non-JDK imports --------------------------------------------------------import lombok.Getter;import lombok.Setter;import org.apache.commons.lang.builder.HashCodeBuilder;import org.dom4j.tree.DefaultAttribute;import org.dom4j.tree.DefaultElement;import java.io.Serial;import java.util.Objects;import static org.apache.commons.lang.StringEscapeUtils.escapeHtml;/** * Object representing a blog comment * * @author Laurent Morissette * */@SuppressWarnings("unused")@Setter@Getterpublic final class BlogComment extends AbstractBlogEntity {    @Serial    private static final long serialVersionUID = -3684562856217228760L; private String mAuthor = null;    private String mCommentText = null;    private String mDate = null;    private String mEntryID = null;    private String mWebPage = null;    /**     *     * @param element XML node to create a comment from     */    public BlogComment(DefaultElement element) {        mAssociatedElement = element;        setDate(element.valueOf("@date"));        setAuthor(element.valueOf("@author"));        setWebPage(element.valueOf("@webPage"));        setCommentText(element.element("CommentText").getText());        setEntryID(element.valueOf("@entryID"));        formatAttributesValuesAsHTML();    }    /**     * Creates a new instance of blogComment     *     * @param entryID entry ID related to the comment     * @param pDate date of comment     * @param pAuthor author of the comment     * @param pPage web page of the author of comment     * @param pText text of comment     *     */    public BlogComment(String entryID, String pDate, String pAuthor, String pPage, String pText) {        setEntryID(entryID);        setDate(pDate);        setAuthor(pAuthor);        setWebPage(pPage);        setCommentText(pText);        formatAttributesValuesAsHTML();    }    /**     *     */    String getDate() {        return mDate;    }    /**     *     */    private void setDate(String mDate) {        this.mDate = mDate;    }    /**     *     */    String getAuthor() {        return mAuthor;    }    /**     *     */    private void setAuthor(String mAuthor) {        this.mAuthor = mAuthor;    }    /**     *     */    String getWebPage() {        return mWebPage;    }    /**     *     */    private void setWebPage(String mWebPage) {        this.mWebPage = mWebPage;    }    /**     *     * @return text of comment     */    public String getCommentText() {        return mCommentText;    }    /**     *     */    private void setCommentText(String mCommentText) {        this.mCommentText = mCommentText;    }    @Override    public DefaultElement toElement() {        // this is element Declaration in complete form.        DefaultElement lReturnElement;        DefaultElement lCommentText = new DefaultElement("CommentText");        lCommentText.addText(mCommentText);        lReturnElement = new DefaultElement("Comment");        // lReturnElement.add(mNamespace);        lReturnElement.add(new DefaultAttribute("entryID", getEntryID()));        lReturnElement.add(new DefaultAttribute("ID", getEntityID()));        lReturnElement.add(new DefaultAttribute("date", mDate));        lReturnElement.add(new DefaultAttribute("author", mAuthor));        lReturnElement.add(new DefaultAttribute("webPage", mWebPage));        lReturnElement.add(lCommentText);        return lReturnElement;    }    @Override    void formatAttributesValuesAsHTML() {        mAuthor = escapeHtml(mAuthor);        mCommentText = escapeHtml(mCommentText);    }    @Override    public int hashCode() {        return new HashCodeBuilder(19, 1001).append(getAuthor()).append(getCommentText()).append(getDate()).append(                getWebPage()).toHashCode();    }    @Override    public boolean equals(Object obj) {        if (obj == null) {            return false;        }        if (getClass() != obj.getClass()) {            return false;        }        final BlogComment other = (BlogComment) obj;        if (!Objects.equals(this.mAuthor, other.mAuthor)) {            return false;        }        if (!Objects.equals(this.mCommentText, other.mCommentText)) {            return false;        }        if (!Objects.equals(this.mDate, other.mDate)) {            return false;        }        if (!Objects.equals(this.mEntryID, other.mEntryID)) {            return false;        }        return Objects.equals(this.mWebPage, other.mWebPage);    }    /**     * @return the EntryID     */    public String getEntryID() {        return mEntryID;    }    /**     */    void setEntryID(String mEntryID) {        this.mEntryID = mEntryID;    }}//~ Formatted by Jindent --- http://www.jindent.com