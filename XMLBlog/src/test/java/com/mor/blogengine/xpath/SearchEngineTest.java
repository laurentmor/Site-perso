/** * Copyright 2021 Laurent * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//* * The MIT License * * Copyright 2015 Laurent Morissette. * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package com.mor.blogengine.xpath;import com.mor.blogengine.exception.NoMatchesFoundException;import com.mor.test.XMLConsumingTestCase;import java.lang.reflect.Field;import java.util.logging.Level;import java.util.logging.Logger;import static com.mor.blogengine.xpath.SearchEngine.getInstanceForDoc;import static org.junit.jupiter.api.Assertions.*;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.DisplayName;import javax.naming.ConfigurationException;/** * @author laurent */@DisplayName("Search Engine Test")class SearchEngineTest extends XMLConsumingTestCase {    @BeforeEach    void clean() {        try {            Field instance = SearchEngine.class.getDeclaredField("mInstance");            instance.setAccessible(true);            instance.set(null, null);            setupFullSettings();        } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {            Logger.getLogger(SearchEngineTest.class.getName()).log(Level.SEVERE, null, ex);        }    }    public SearchEngineTest() {    }    @Test    @DisplayName("Init Sans Doc")    void initSansDoc() {        Exception e=assertThrows(NullPointerException.class, () -> {            getInstanceForDoc(null, null);        });        assertEquals("Properties null or not loaded",e.getMessage());    }    @Test    @DisplayName("Init Avec Doc")    void initAvecDoc() {       Exception e= assertThrows(NullPointerException.class, () -> {            getInstanceForDoc(null, getBlogDocument());        });       assertEquals("Properties null or not loaded", e.getMessage());    }    @Test    @DisplayName("Init Avec Config Sans Doc")    void initAvecConfigSansDoc() {        assertThrows(IllegalArgumentException.class, () -> {            getInstanceForDoc(getProperties(), null);        });    }    @Test    @DisplayName("Ini Correct")    void iniCorrect() throws ConfigurationException {        getInstanceForDoc(getProperties(), getBlogDocument());    }}