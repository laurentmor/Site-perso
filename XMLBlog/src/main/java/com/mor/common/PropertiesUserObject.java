/* * Copyright (c) 2024 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * */package com.mor.common;//~--- JDK imports ------------------------------------------------------------import static com.mor.blogengine.xpath.XPathVersion.typeLess;import static com.mor.blogengine.xpath.XPathVersion.typed;import com.mor.blogengine.exception.IncorrectPropertyValueException;import com.mor.blogengine.exception.MissingPropertyException;import com.mor.blogengine.xpath.XPathVersion;import java.io.File;import java.util.Objects;import java.util.Properties;import java.util.logging.Level;import javax.validation.constraints.NotNull;import lombok.Getter;import lombok.Setter;import lombok.extern.java.Log;import org.apache.commons.io.FileUtils;/** Class to give access to properties file to subclass. * * @author laurent */@Setter@SuppressWarnings("SameReturnValue")@Logpublic  class PropertiesUserObject {  /**Persisting YES flag. **/  static final boolean YES = true;  /**Persisting NO flag. **/  static final boolean NO = false;  /**application mode key. **/  static final String MODE_PROPERTY = "application.mode";  /**application debug key. **/  static final String DEBUG_PROPERTY = "application.debug";  /**application LEVEL key. **/  static final String LEVEL_PROPERTY = "log.level";  /**XML encoding charset key. **/  static final String ENCODING_PROPERTY = "file.encoding";  /**supported XPath version key. **/  static final String XPATH_PROPERTY = "xpath.version";  /**XKL datasource location key. **/  static final String XML_PROPERTY = "datasource.xml";  /**schema location key. **/  static final String XSD_PROPERTY = "datasource.xsd";  /** Object configuration holder.**/  @Getter  private Properties config;  /** schema file. */  private File schema = null;  /**   * Default constructor with properties.   * @param p - configuration.   */  public PropertiesUserObject(@NotNull  final Properties p) {    config = p;  }  /** Does some logging if application is in test mode and debug is set to On.   * @param traceMessage - what to trace   * @throws MissingPropertyException  when debug property is missing.   * @throws IncorrectPropertyValueException when debug is incorrectly set.   */  public void trace(final String traceMessage)      throws MissingPropertyException, IncorrectPropertyValueException {    if (isModePropertySet() && areTestConditionsMet() && areDebugConditionsMet()        && isDebugOn()) {      log.log(getLoggingLevel(), traceMessage);    }  }  /** Does some logging if application is in test mode and debug is set to On.   *   * @param traceMessage - what to trace   * @param t            - exception   * @throws MissingPropertyException when debug property is missing   * @throws IncorrectPropertyValueException when debug is incorrectly set   */  public void trace(final String traceMessage, final Throwable t)      throws MissingPropertyException, IncorrectPropertyValueException {    if (isModePropertySet() && areTestConditionsMet() && areDebugConditionsMet()        && isDebugOn()) {      log.log(getLoggingLevel(), traceMessage, t);    }  }  /**   * Does some logging if application is in test mode and debug is set to On.   *   * @param traceMessage - what to trace   * @param t            - exception   * @param l - Level to log at   * @throws MissingPropertyException when debug property is missing   * @throws IncorrectPropertyValueException when debug is incorrectly  set   */  public void trace(final Level l, final String traceMessage, final Throwable t)      throws MissingPropertyException, IncorrectPropertyValueException {    if (isModePropertySet() && areTestConditionsMet() && areDebugConditionsMet()        && isDebugOn()) {      log.log(l, traceMessage, t);    }  }  private boolean areDebugConditionsMet()      throws MissingPropertyException, IncorrectPropertyValueException {    return isDebugPropertiesSet() && isInKnownDebugState();  }  private boolean areTestConditionsMet()      throws IncorrectPropertyValueException, MissingPropertyException {    return isInKnownMode() && isInTestMode();  }  /** check if changes need to be saved on file.   * @return YES if we have to save change in file.   *  @throws MissingPropertyException when mode Property is not set   */  public boolean isPersistingNecessary() throws MissingPropertyException {    if (isModePropertySet()) {      return isInTestMode()          ? NO          : YES;    }    throw new MissingPropertyException(MODE_PROPERTY);  }  /** Get the XPath version supported in config.   * @return the supported xpath version of specs.   */  public final XPathVersion getSupportedXpathVersion() {    if ("2.0f".equalsIgnoreCase(getPropertyValue(XPATH_PROPERTY))) {      return typed;    }    return typeLess;  }  /** check if configuration has mode property.   * @return does the config file have all the necessary properties ?   */  public final boolean isModePropertySet() throws MissingPropertyException {    return isPropertyExistent(MODE_PROPERTY);  }  private Level getLoggingLevel() {    return Level.parse(Objects.requireNonNull(        getPropertyValue(LEVEL_PROPERTY)));  }  /**   * Get application files encoding.   * @return charset. */  public final String getFileEncoding() {    return getPropertyValue(ENCODING_PROPERTY);  }  /** checks if application is in test mode.   * @return true if application is in test mode with debug flag set to on.*/  protected final boolean isInTestMode() throws MissingPropertyException {    if (isModePropertySet()) {      return Objects.requireNonNull(          getPropertyValue(MODE_PROPERTY)).equalsIgnoreCase("test");    }    return false;  }  private  boolean  isPropertyExistent(final String prop)      throws MissingPropertyException {    if (config.getProperty(prop) != null) {      return true;    } else {      throw new MissingPropertyException(prop);    }  }  /**   * check if the application is in Debug mode.   * @return tue if YES .   */  public final boolean isDebugOn() {    return Objects.requireNonNull(        getPropertyValue(DEBUG_PROPERTY)).equalsIgnoreCase(DebugMode.On        .toString());  }  /** get the XSD to validate file.   * @return schema full url .   * @throws MissingPropertyException        - if config is missing a property   * @throws IncorrectPropertyValueException if config is incorrect   */  protected final File getSchema()      throws MissingPropertyException, IncorrectPropertyValueException {    String fileName = getPropertyValue(XSD_PROPERTY);    File schemaFile = getFileFromProperty(fileName);    trace("Retrieving schema URL at : " + Objects        .requireNonNull(schemaFile).getAbsolutePath());    schema = schemaFile;    return schema;  }  /** Get the application datasource XML.   * @return xml full url.   * @throws MissingPropertyException   - if config is missing a property.   * @throws IncorrectPropertyValueException if config is incorrect.   */  protected final File getXml() throws MissingPropertyException,      IncorrectPropertyValueException {    String xmlFullPath = getPropertyValue(XML_PROPERTY);    File xmlFile = getFileFromProperty(xmlFullPath);    trace("Retrieving XML URL at : " + xmlFile.getAbsolutePath());    return xmlFile;  }  private boolean isDebugPropertiesSet() throws MissingPropertyException {    return isPropertyExistent(DEBUG_PROPERTY);  }  /**   * Get a config property value.   @param property the config property key name .   * @return tue if YES .   */  public final String getPropertyValue(final String property) {    if (config != null && !config.isEmpty()) {      return config.getProperty(property);    }    return null;  }  private boolean isInKnownMode() throws IncorrectPropertyValueException {    String mode = getPropertyValue(MODE_PROPERTY);    String test = ApplicationMode.Test.toString();    String production = ApplicationMode.Production.toString();    boolean isKnownMode = Objects.requireNonNull(mode).equalsIgnoreCase(test)        || mode.equalsIgnoreCase(production);    if (isKnownMode) {      return YES;    }    throw new IncorrectPropertyValueException(MODE_PROPERTY,        getPropertyValue(MODE_PROPERTY),        ApplicationMode.Test,        ApplicationMode.Production);  }  private boolean isInKnownDebugState() throws IncorrectPropertyValueException {    String state = getPropertyValue(DEBUG_PROPERTY);    String on = DebugMode.On.toString();    String off = DebugMode.Off.toString();    boolean isKnownState = Objects.requireNonNull(state).equalsIgnoreCase(on)        || state.equalsIgnoreCase(off);    if (isKnownState) {      return YES;    } else {      throw new IncorrectPropertyValueException(MODE_PROPERTY,          getPropertyValue(MODE_PROPERTY),          DebugMode.Off,          DebugMode.On);    }  }  private File getFileFromProperty(final String fileName) {    return FileUtils.getFile(fileName);  }}//-