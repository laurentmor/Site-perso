/* * Copyright (c) 2024 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * */package com.mor.blogengine.controllers;import com.mor.blogengine.dao.BlogEntryRepository;import com.mor.blogengine.dao.Repository;import com.mor.blogengine.exception.ElementExistingException;import com.mor.blogengine.exception.IncorrectPropertyValueException;import com.mor.blogengine.exception.MissingPropertyException;import com.mor.blogengine.exception.NoMatchesFoundException;import com.mor.blogengine.model.BlogEntry;import com.mor.blogengine.xpath.SearchCriteria;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.logging.Level;import java.util.logging.Logger;import org.dom4j.DocumentException;import org.dom4j.tree.DefaultElement;/** * @author laurent */@SuppressWarnings ("checkstyle:RegexpSingleline")public class EntryController extends BlogControllerBase implements    IBlogElementController<BlogEntry, DocumentException> {  /**   * DAO repository.   */  private final Repository<BlogEntry, DefaultElement,                              SearchCriteria, DocumentException> repo;  /**   * Construct Entry controller class using given . properties configuration.   *   * @param config related EntryController configuration   */  public EntryController(final Properties config) throws MissingPropertyException,                                                             IncorrectPropertyValueException {    super(config);    repo = new BlogEntryRepository(getConfig(), getDocument());  }  @Override  public Map<String, BlogEntry> getAllElements() {    try {      List<DefaultElement> elements = repo.getElementsForCriteria(SearchCriteria.ALL, null);      return getFactory().createEntryMap(elements);    } catch (NoMatchesFoundException ex) {      try {        trace(ex.getMessage());      } catch (MissingPropertyException | IncorrectPropertyValueException ex1) {        Logger.getLogger(EntryController.class.getName()).log(Level.SEVERE, null, ex1);      }    }    return null;  }  @Override  public boolean addNewElement(BlogEntry e) throws DocumentException {    try {      return repo.add(e);    } catch (ElementExistingException ex) {      Logger.getLogger(EntryController.class.getName()).log(Level.SEVERE, null, ex);    }    return false;  }  @Override  public boolean deleteElement(BlogEntry e) throws DocumentException {    try {      return repo.remove(e);    } catch (NoMatchesFoundException ex) {      Logger.getLogger(EntryController.class.getName()).log(Level.SEVERE, null, ex);    }    return false;  }  @Override  public boolean editElement(BlogEntry what, BlogEntry with) throws DocumentException {    try {      return repo.edit(what, with);    } catch (NoMatchesFoundException | ElementExistingException ex) {      return false;    }  }  @Override  public Map<String, BlogEntry> getElementsForDate(String d) {    try {      return getFactory().createEntryMap(repo.getElementsForCriteria(SearchCriteria.DATE, d));    } catch (NoMatchesFoundException ex) {      Logger.getLogger(EntryController.class.getName()).log(Level.SEVERE, null, ex);    }    return null;  }  /**   * For the moment there is no use of definition as no needs were shown To introduce parent entry   * concept   *   * @param parentID the parent node ID to check for   */  @Override  public Map<String, BlogEntry> getAllElements(final String parentID) {    return getAllElements();  }}