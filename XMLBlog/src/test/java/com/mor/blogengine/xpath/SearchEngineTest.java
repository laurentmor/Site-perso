/* * Copyright (c) 2024 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * */package com.mor.blogengine.xpath;import static com.mor.blogengine.xpath.SearchEngine.getInstanceForDoc;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.junit.jupiter.api.Assertions.assertThrows;import com.mor.blogengine.exception.IncorrectPropertyValueException;import com.mor.blogengine.exception.MissingPropertyException;import com.mor.blogengine.exception.NoMatchesFoundException;import com.mor.test.XMLConsumingTestCase;import java.lang.reflect.Field;import java.util.logging.Level;import java.util.logging.Logger;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;/** * @author laurent */@DisplayName("Search Engine Test")class SearchEngineTest extends XMLConsumingTestCase {  /** Default constructor. */  public SearchEngineTest() {    super();  }  /** Clean singleton. */  @BeforeEach  void clean() {    try {      Field instance = SearchEngine.class.getDeclaredField("mInstance");      instance.setAccessible(true);      instance.set(null, null);    } catch (NoSuchFieldException        | SecurityException        | IllegalArgumentException        | IllegalAccessException ex) {      Logger.getLogger(SearchEngineTest.class.getName()).log(Level.SEVERE, null, ex);    }  }  /** Test object behavior when config is provided but no doc is. */  @Test  @DisplayName("instanceWithConfigAndNoDoc")  void instanceWithConfigAndNoDoc() {    Exception e = assertThrows(IllegalArgumentException.class, () -> getInstanceForDoc(null, null));    assertEquals("Config properties must be set", e.getMessage());  }  /** Test object behavior when no config is provided but doc is. */  @Test  @DisplayName("Instance with No Config and a Doc")  void instanceWithNoConfigAndADoc() {    Exception e =        assertThrows(NullPointerException.class, () -> getInstanceForDoc(null, getBlogDocument()));    assertEquals("config is marked non-null but is null", e.getMessage());  }  @Test  @DisplayName("Instance with Config and no Doc")  void InstanceWithConfigAndNoDoc() {    assertThrows(IllegalArgumentException.class, () -> getInstanceForDoc(mConfig, null));  }  /** stupid pattern test */  @Test  @DisplayName("Singleton pattern test")  void getInstanceTest() {    assertNotNull(getInstanceForDoc(mConfig, getBlogDocument()));    assertNotNull(getInstanceForDoc(mConfig, getBlogDocument()));  }  @Test  @DisplayName("get all categories test")  void getCategoriesTest()      throws NoMatchesFoundException, MissingPropertyException, IncorrectPropertyValueException {    assertFalse(getInstanceForDoc(mConfig, getBlogDocument()).getCategories().isEmpty());  }  @Test  @DisplayName("get all Entries test")  void getEntriesTest()      throws NoMatchesFoundException, MissingPropertyException, IncorrectPropertyValueException {    assertFalse(getInstanceForDoc(mConfig, getBlogDocument()).getEntries().isEmpty());  }}