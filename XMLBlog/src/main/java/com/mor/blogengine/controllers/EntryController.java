/* * Copyright (c) 2024 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * */package com.mor.blogengine.controllers;import static com.mor.blogengine.xpath.SearchCriteria.ALL;import static com.mor.blogengine.xpath.SearchCriteria.DATE;import static java.util.logging.Level.SEVERE;import com.mor.blogengine.dao.BlogEntryRepository;import com.mor.blogengine.exception.ElementExistingException;import com.mor.blogengine.exception.IncorrectPropertyValueException;import com.mor.blogengine.exception.MissingPropertyException;import com.mor.blogengine.exception.NoMatchesFoundException;import com.mor.blogengine.model.BlogEntry;import com.mor.blogengine.xpath.SearchCriteria;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.logging.Logger;import org.dom4j.DocumentException;import org.dom4j.tree.DefaultElement;/** * Entry controller class. * * @author laurent */public final class EntryController    extends BlogControllerBase<BlogEntry, DefaultElement, SearchCriteria, DocumentException>    implements IBlogElementController<BlogEntry, DocumentException> {  /**   * Construct Entry controller class using given . properties configuration.   *   * @param config related EntryController configuration   * @throws MissingPropertyException when a config property is missing   * @throws IncorrectPropertyValueException when a config property is incorrectly set   */  public EntryController(final Properties config)      throws MissingPropertyException, IncorrectPropertyValueException {    super(config);    repository = new BlogEntryRepository(getConfig(), getDocument());  }  /**   * No use of definition as no needs were shown To introduce parent.   *   * @param parentId the parent node ID to check for   */  @Override  public Map<String, BlogEntry> getAllElements(final String parentId) {    return getAllElements();  }  @Override  public Map<String, BlogEntry> getAllElements() {    try {      List<DefaultElement> elements = getRepository().getElementsForCriteria(ALL, null);      return getFactory().createEntryMap(elements);    } catch (NoMatchesFoundException ex) {      try {        trace(ex.getMessage());      } catch (MissingPropertyException | IncorrectPropertyValueException ex1) {        Logger.getLogger(EntryController.class.getName()).log(SEVERE, null, ex1);      }    }    return null;  }  @Override  public boolean addNewElement(final BlogEntry e) throws DocumentException {    try {      return getRepository().add(e);    } catch (ElementExistingException ex) {      Logger.getLogger(EntryController.class.getName()).log(SEVERE, null, ex);    }    return false;  }  @Override  public boolean deleteElement(final BlogEntry e) throws DocumentException {    try {      return getRepository().remove(e);    } catch (NoMatchesFoundException ex) {      Logger.getLogger(EntryController.class.getName()).log(SEVERE, null, ex);    }    return false;  }  @Override  public boolean editElement(final BlogEntry what, final BlogEntry with) throws DocumentException {    try {      return getRepository().edit(what, with);    } catch (NoMatchesFoundException ex) {      return false;    }  }  @Override  public Map<String, BlogEntry> getElementsForDate(final String d) {    try {      return getFactory().createEntryMap(getRepository().getElementsForCriteria(DATE, d));    } catch (NoMatchesFoundException ex) {      Logger.getLogger(EntryController.class.getName()).log(SEVERE, null, ex);    }    return null;  }}