/** * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.mor.common;//~--- JDK imports ------------------------------------------------------------import com.mor.blogengine.exception.IncorrectPropertyValueException;import com.mor.blogengine.exception.MissingPropertyException;import com.mor.blogengine.xpath.XPathVersion;import lombok.Setter;import lombok.extern.java.Log;import org.apache.commons.io.FileUtils;import javax.validation.constraints.NotNull;import java.io.File;import java.util.Objects;import java.util.Properties;import java.util.logging.Level;import static com.mor.blogengine.xpath.XPathVersion.typeLess;import static com.mor.blogengine.xpath.XPathVersion.typed;/** * Class to give access to properties file to subclass and enabling some * properties value interrogation<br/> * * @author laurent */@SuppressWarnings("SameReturnValue")@Logpublic abstract class PropertiesUserObject {    @Setter    private File schema=null;    final static boolean YES = true;    final static boolean NO = false;    final static String MODE_PROPERTY = "application.mode";    final static String DEBUG_PROPERTY = "application.debug";    final static String LEVEL_PROPERTY = "log.level";    final static String ENCODING_PROPERTY = "file.encoding";    final static String XPATH_PROPERTY = "xpath.version";    final static String XML_PROPERTY = "datasource.xml";    final static String XSD_PROPERTY = "datasource.xsd";    /**     *     */    protected Properties mConfig;    public PropertiesUserObject(@NotNull(message = "Properties null000 or not loaded") Properties pConfig) {        if (pConfig==null||pConfig.isEmpty()) throw new NullPointerException("Properties null or not loaded");        mConfig = pConfig;    }    /**     * Does some logging if application is in test mode and debug is set to On     *     * @param traceMessage - what to trace     * @throws MissingPropertyException when debug property is missing     * @throws com.mor.blogengine.exception.IncorrectPropertyValueException when debug is incorrectly  set     */    protected void trace(String traceMessage) throws MissingPropertyException, IncorrectPropertyValueException {        if (isModePropertySet() && areTestConditionsMet() && areDebugConditionsMet() && isDebugOn()) {            log.log(getLoggingLevel(), traceMessage);        }    }/**     * Does some logging if application is in test mode and debug is set to On     *     * @param traceMessage - what to trace     * @param t - exception     * @throws MissingPropertyException when debug property is missing     * @throws com.mor.blogengine.exception.IncorrectPropertyValueException when debug is incorrectly  set     */    protected void trace(String traceMessage,Throwable t) throws MissingPropertyException, IncorrectPropertyValueException {        if (isModePropertySet() && areTestConditionsMet() && areDebugConditionsMet() && isDebugOn()) {            log.log(getLoggingLevel(), traceMessage,t);        }    }/**     * Does some logging if application is in test mode and debug is set to On     *     * @param traceMessage - what to trace     * @param t - exception     * @throws MissingPropertyException when debug property is missing     * @throws com.mor.blogengine.exception.IncorrectPropertyValueException when debug is incorrectly  set     */    protected void trace(Level l, String traceMessage,Throwable t) throws MissingPropertyException, IncorrectPropertyValueException {        if (isModePropertySet() && areTestConditionsMet() && areDebugConditionsMet() && isDebugOn()) {            log.log(l, traceMessage,t);        }    }    private boolean areDebugConditionsMet() throws MissingPropertyException, IncorrectPropertyValueException {        return isDebugPropertiesSet() && isInKnownDebugState();    }    private boolean areTestConditionsMet() throws IncorrectPropertyValueException, MissingPropertyException {        return isInKnownMode() && isInTestMode();    }    /**     *     * @return YES if we have to save change in file     * @throws com.mor.blogengine.exception.MissingPropertyException when mode Property is not set     */    protected boolean isPersistingNecessary() throws MissingPropertyException {        if (isModePropertySet()) {            return isInTestMode()                    ? NO                    : YES;        }        throw new MissingPropertyException(MODE_PROPERTY);    }    /**     *     * @return the supported xpath version of specs     */    protected final XPathVersion getSupportedXpathVersion() {        if ("2.0f".equalsIgnoreCase(getPropertyValue(XPATH_PROPERTY))) {            return typed;        }        return typeLess;    }    /**     *     * @return does the config file have all the necessary properties ?     */    protected boolean isModePropertySet() throws MissingPropertyException {        return isPropertyExistent(MODE_PROPERTY);    }    private Level getLoggingLevel() {        return Level.parse(Objects.requireNonNull(getPropertyValue(LEVEL_PROPERTY)));    }    protected String getFileEncoding() {        return getPropertyValue(ENCODING_PROPERTY);    }    /**     *     * @return true if application is in test mode with debug flag set to on     */    protected boolean isInTestMode() throws MissingPropertyException {        if (isModePropertySet()) {            return Objects.requireNonNull(getPropertyValue(MODE_PROPERTY)).equalsIgnoreCase("test");        }        return false;    }    private boolean isPropertyExistent(String prop) throws MissingPropertyException {        if (mConfig.getProperty(prop) != null) {            return true;        }       else throw new MissingPropertyException(prop);    }    protected boolean isDebugOn() {        return Objects.requireNonNull(getPropertyValue(DEBUG_PROPERTY)).equalsIgnoreCase(DebugMode.On                .toString());    }    /**     * @return schema full url     * @throws com.mor.blogengine.exception.MissingPropertyException        - if config is missing a property     * @throws com.mor.blogengine.exception.IncorrectPropertyValueException if config is incorrect     */    protected final File getSchema() throws MissingPropertyException, IncorrectPropertyValueException {        String fileName = getPropertyValue(XSD_PROPERTY);        File schemaFile = getFileFromProperty(fileName);        trace("Retrieving schema URL at : " + Objects.requireNonNull(schemaFile).getAbsolutePath());        schema=schemaFile;        return schema;    }    /**     * @return xml full url     * @throws com.mor.blogengine.exception.MissingPropertyException        - if config is missing a property     * @throws com.mor.blogengine.exception.IncorrectPropertyValueException if config is incorrect     */    protected final File getXml() throws MissingPropertyException, IncorrectPropertyValueException {        String xmlFullPath = getPropertyValue(XML_PROPERTY);        File xmlFile = getFileFromProperty(xmlFullPath);        trace("Retrieving XML URL at : " + xmlFile.getAbsolutePath());        return xmlFile;    }    private boolean isDebugPropertiesSet() throws MissingPropertyException {        return isPropertyExistent(DEBUG_PROPERTY);    }    public final String getPropertyValue(String property) {        if (mConfig != null && !mConfig.isEmpty()) {            return mConfig.getProperty(property);        }        return null;    }    private boolean isInKnownMode() throws IncorrectPropertyValueException {        String mode = getPropertyValue(MODE_PROPERTY);        String test = ApplicationMode.Test.toString();        String production = ApplicationMode.Production.toString();        boolean isKnownMode = Objects.requireNonNull(mode).equalsIgnoreCase(test)                || mode.equalsIgnoreCase(production);        if (isKnownMode) {            return YES;        }        throw new IncorrectPropertyValueException(MODE_PROPERTY,                getPropertyValue(MODE_PROPERTY),                ApplicationMode.Test,                ApplicationMode.Production);    }    private boolean isInKnownDebugState() throws IncorrectPropertyValueException {        String state = getPropertyValue(DEBUG_PROPERTY);        String on = DebugMode.On.toString();        String off = DebugMode.Off.toString();        boolean isKnownState = Objects.requireNonNull(state).equalsIgnoreCase(on)                || state.equalsIgnoreCase(off);        if (isKnownState) {            return YES;        }       else throw new IncorrectPropertyValueException(MODE_PROPERTY,                getPropertyValue(MODE_PROPERTY),                DebugMode.Off,                DebugMode.On);    }    private File getFileFromProperty(String fileName) {        return FileUtils.getFile(fileName);    }}//-//~ Formatted by Jindent --- http://www.jindent.com