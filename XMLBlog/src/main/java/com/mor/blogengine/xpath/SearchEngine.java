/* * Copyright (c) 2024 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * */package com.mor.blogengine.xpath;//~--- non-JDK imports --------------------------------------------------------import static com.mor.blogengine.xpath.SearchCriteria.ALL;import static com.mor.blogengine.xpath.SearchCriteria.BY_ENTRY_ID;import static com.mor.blogengine.xpath.SearchCriteria.CATEGORY;import static com.mor.blogengine.xpath.SearchCriteria.DATE;import static com.mor.blogengine.xpath.SearchCriteria.SINGLE;import static com.mor.blogengine.xpath.SearchCriteria.SINGLE_WITH_PARENT;import com.mor.blogengine.exception.IncorrectPropertyValueException;import com.mor.blogengine.exception.MissingPropertyException;import com.mor.blogengine.exception.NoMatchesFoundException;import com.mor.common.PropertiesUserObject;import jakarta.validation.constraints.NotNull;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.Properties;import lombok.extern.slf4j.Slf4j;import org.dom4j.Document;import org.dom4j.InvalidXPathException;import org.dom4j.tree.DefaultAttribute;import org.dom4j.tree.DefaultElement;/** * Search for content in XML data Structure. * * @author Laurent */@Slf4jpublic final class SearchEngine extends PropertiesUserObject implements    IBlogSearchEngine<DefaultElement> {  /**   * Class instance.   */  private static SearchEngine mInstance;  /**   * Configurator object that hold low level XPATH dom tree selection.   */  private final SearchEngineConfigurator<List<DefaultElement>> configurator;  private SearchEngine(@NotNull final Properties config, final Document d) {    super(config);    if (d == null) {      throw new IllegalArgumentException("Config properties must be set");    }    configurator = new SearchEngineConfigurator<>(getConfig(), d);  }  /**   * Get SearchEngine instance for specific config and XML document.   *   * @param config  the configuration.   * @param domTree the XML document.   * @return the engine instance.   */  public static synchronized SearchEngine getInstanceForDoc(      final Properties config,      final Document domTree) {    if ((config != null)) {      if (mInstance != null) {        return mInstance;      }    }    mInstance = new SearchEngine(config, domTree);    return mInstance;  }  // -----------------------Search Methods definitions ----------------------//  /**   * Get all categories.   *   * @return category list   */  @NotNull List<DefaultElement> getCategories()      throws InvalidXPathException, NoMatchesFoundException,                 MissingPropertyException, IncorrectPropertyValueException {    trace("Building XPath search Query to get all categories");    List<String> nodes = new ArrayList<>();    nodes.add("Category");    String exp = new XpathExpressionBuilder("Blog", nodes, null,        getSupportedXpathVersion()).compileExpression();    return Collections.unmodifiableList(configurator.findContent(exp));  }  @NotNull List<DefaultElement> getEntriesForCategory(final String id)      throws NoMatchesFoundException,                 MissingPropertyException, IncorrectPropertyValueException {    trace("Building XPath search Query to get entries for a category");    List<String> nodes = new ArrayList<>();    nodes.add("Entry");    DefaultAttribute attribute = new DefaultAttribute("categoryID", id);    List<DefaultAttribute> attributes = new ArrayList<>();    attributes.add(attribute);    String exp = new XpathExpressionBuilder("Blog", nodes, attributes,        getSupportedXpathVersion()).compileExpression();    return Collections.unmodifiableList(configurator.findContent(exp));  }  @NotNull List<DefaultElement> getEntriesForDate(final String date)      throws NoMatchesFoundException, InvalidXPathException,                 MissingPropertyException, IncorrectPropertyValueException {    trace("Building XPath search Query to get entries for a date");    List<String> nodesList = new ArrayList<>();    List<DefaultAttribute> attList = new ArrayList<>();    nodesList.add("Entry");    attList.add(new DefaultAttribute("date", date));    String exp = new XpathExpressionBuilder("Blog", nodesList, attList,        getSupportedXpathVersion()).compileExpression();    return Collections.unmodifiableList(configurator.findContent(exp));  }  @NotNull List<DefaultElement> getSingleElement(      final String searchedElementName,      final String id)      throws NoMatchesFoundException,                 MissingPropertyException, IncorrectPropertyValueException {    trace("Building XPath search Query to get  a single element");    List<String> nodes = new ArrayList<>();    nodes.add(searchedElementName);    DefaultAttribute attribute = new DefaultAttribute("ID", id);    List<DefaultAttribute> attList = new ArrayList<>();    attList.add(attribute);    String exp = new XpathExpressionBuilder("Blog", nodes, attList,        getSupportedXpathVersion()).compileExpression();    return Collections.unmodifiableList(configurator.findContent(exp));  }  @NotNull List<DefaultElement> getCommentsForEntry(final String id)      throws NoMatchesFoundException,                 MissingPropertyException, IncorrectPropertyValueException {    trace("Building XPath search Query to get comment for an entry");    List<String> nodes = new ArrayList<>();    nodes.add("Entry");    nodes.add("Comment");    DefaultAttribute attribute = new DefaultAttribute("entryID", id);    List<DefaultAttribute> attList = new ArrayList<>();    attList.add(attribute);    String exp = new XpathExpressionBuilder("Blog", nodes, attList,        getSupportedXpathVersion()).compileExpression();    return Collections.unmodifiableList(configurator.findContent(exp));  }  @NotNull List<DefaultElement> getEntries()      throws NoMatchesFoundException,                 MissingPropertyException, IncorrectPropertyValueException {    trace("Building XPath search Query to get all entries");    List<String> nodes = new ArrayList<>();    nodes.add("Entry");    return Collections.unmodifiableList(        configurator.findContent(new XpathExpressionBuilder("Blog", nodes, null,            getSupportedXpathVersion()).compileExpression()));  }  /**   * Enable the search for certain criteria in XML.   *   * @param elementType   what to search<br/>   * @param criteria      search for what criteria<br/>   * @param criteriaValue criteria value<br/>   * @return list of results<br/>   * @see SearchCriteria   */  @Override  public List<DefaultElement> getElementsForCriteria(final String elementType,      final SearchCriteria criteria,      final String criteriaValue) throws NoMatchesFoundException {    if (elementType != null) {      if (elementType.equalsIgnoreCase("Entry")) {        if (criteria == ALL) {          try {            return getEntries();          } catch (MissingPropertyException                   | IncorrectPropertyValueException ex) {            log.error("", ex);          }        }        if (criteria == DATE) {          try {            return getEntriesForDate(criteriaValue);          } catch (InvalidXPathException | MissingPropertyException                   | IncorrectPropertyValueException ex) {            log.error("", ex);          }        }        if (criteria == CATEGORY) {          try {            return getEntriesForCategory(criteriaValue);          } catch (MissingPropertyException                   | IncorrectPropertyValueException ex) {            log.error("", ex);          }        }      }      if (elementType.equalsIgnoreCase("Comment")              && (criteria == BY_ENTRY_ID)) {        try {          return getCommentsForEntry(criteriaValue);        } catch (MissingPropertyException                 | IncorrectPropertyValueException ex) {          log.error("", ex);        }      }      if (elementType.equalsIgnoreCase("Category") && (criteria == ALL)) {        try {          return getCategories();        } catch (InvalidXPathException                 | MissingPropertyException                 | IncorrectPropertyValueException ex) {          log.error("", ex);        }      }      if (criteria == SINGLE_WITH_PARENT) {        return null;      }      if (criteria == SINGLE) {        try {          return getSingleElement(elementType, criteriaValue);        } catch (MissingPropertyException                 | IncorrectPropertyValueException ex) {          log.error("", ex);        }      }    }    return null;  }}