/** * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Copyright 2021 Laurent * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.mor.blogengine.dao;//~--- non-JDK imports --------------------------------------------------------import com.mor.blogengine.exception.IncorrectPropertyValueException;import com.mor.blogengine.exception.MissingPropertyException;import com.mor.blogengine.exception.NoMatchesFoundException;import com.mor.blogengine.model.BlogComment;import com.mor.blogengine.xpath.SearchCriteria;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.tree.DefaultElement;import java.util.List;import java.util.Properties;import java.util.logging.Level;import java.util.logging.Logger;/** * * @author laurent */public class BlogCommentRepository extends BlogRepositoryBase        implements IRepository<BlogComment, DefaultElement, SearchCriteria, DocumentException> {    /**     * Default constructor     *     * @param document document instance that holds blog data     * @param config global configuration file for application     */    public BlogCommentRepository(final Properties config, final Document document) {        super(document, config);    }    /**     * add a comment to blog     *     * @param t the comment to add     * @return true if comment added correctly     */    @Override    public boolean add(BlogComment t) {        return false;    }    /**     * append a comment to a parent entry to a blog     *     * @param what the comment to append     * @param parentID the ID of parent entry to append to     * @return true if Category appended correctly     *     */    @Override    public boolean append(BlogComment what, String parentID) throws NoMatchesFoundException {        try {            trace("Appending element... " + what.getCommentText());        } catch (MissingPropertyException | IncorrectPropertyValueException ex) {            Logger.getLogger(BlogCommentRepository.class.getName()).log(Level.SEVERE, null, ex);        }        List<DefaultElement> foundList = searchEngine.getElementsForCriteria("Entry",                SearchCriteria.SINGLE, parentID);        try {            DefaultElement relatedEntry = foundList.getFirst();            return handler.append(relatedEntry, what.toElement());        } catch (Exception ex) {            try {                trace(ex.getMessage());            } catch (MissingPropertyException | IncorrectPropertyValueException ex1) {                Logger.getLogger(BlogCommentRepository.class.getName()).log(Level.SEVERE, null, ex1);            }        }        throw new NoMatchesFoundException();    }    /**     * remove a comment to blog     *     * @param t the comment to remove     * @return true if Comment removed correctly     *     */    @Override    public boolean remove(BlogComment t) throws NoMatchesFoundException {        List<DefaultElement> list = getElementsForCriteria(SearchCriteria.SINGLE, t.getEntityID());        return handler.remove(list.getFirst(), t.getEntryID());    }    /**     * edit a comment in a blog     *     * @param t the comment to edit     * @param t2 the new comment     * @return true if Comment edited correctly     */    @Override    public boolean edit(BlogComment t, BlogComment t2) throws NoMatchesFoundException {        boolean removed = remove(t);        boolean appended = append(t2, t2.getEntryID());        return removed && appended;    }    /**     * Enable the search for comment and criteria in XML <br/>     *     * @param searchParam what to search<br/>     * @param paramValue search for what criteria<br/>     *     * @return list of results<br/>     */    @Override    public List<DefaultElement> getElementsForCriteria(SearchCriteria searchParam, String paramValue)            throws NoMatchesFoundException {        List<DefaultElement> list = searchEngine.getElementsForCriteria("Comment",                searchParam, paramValue);        if (list == null) {            throw new NoMatchesFoundException();        }        return list;    }    @Override    public boolean append(BlogComment what) {        throw new UnsupportedOperationException("Not supported yet.");    }}//~ Formatted by Jindent --- http://www.jindent.com