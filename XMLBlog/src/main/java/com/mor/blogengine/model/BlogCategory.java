/* * Copyright (c) 2024 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * */package com.mor.blogengine.model;//~--- non-JDK imports --------------------------------------------------------import static org.apache.commons.lang.StringEscapeUtils.escapeHtml;import java.io.Serial;import java.util.Objects;import org.apache.commons.lang.builder.HashCodeBuilder;import org.dom4j.tree.DefaultAttribute;import org.dom4j.tree.DefaultElement;/** * Object representing a blog category * * @author Laurent Morissette */public final class BlogCategory extends AbstractBlogEntity {  @Serial  private static final long serialVersionUID = 7735878793954382143L;  /**   * category name   */  private String mCatName = null;  /**   * category description   */  private String mDescription = null;  /**   * default constructor   */  public BlogCategory() {  }  /**   * @param pElement XML node to create a category from   */  public BlogCategory(DefaultElement pElement) {    if (null == pElement) {      throw new IllegalArgumentException("pElement required");    }    mAssociatedElement = pElement;    mCatName = mAssociatedElement.valueOf("@name");    mDescription = mAssociatedElement.valueOf("@description");    formatAttributes();  }  /**   * construct a category in a blog   *   * @param pCatName name of the category   */  public BlogCategory(String pCatName) {    mCatName = pCatName;    formatAttributes();  }  /**   * construct a category in a blog   *   * @param pCatName name of the category   * @param pDesc    description of category   */  public BlogCategory(String pCatName, String pDesc) {    if (null == pCatName) {      throw new IllegalArgumentException("Name is required");    }    mCatName = pCatName;    mDescription = pDesc;    formatAttributes();  }  /**   * @return mCatName name of the category   */  public String getCatName() {    return mCatName;  }  /**   * @return 1 if both category are the same -1 if not   */  @SuppressWarnings("unused")  public int compareTo(Object o) {    BlogCategory lCatComp = (BlogCategory) o;    if (getEntityiD().equalsIgnoreCase(lCatComp.getEntityiD())) {      return 1;    }    return -1;  }  /**   * @return category description   */  public String getDescription() {    return mDescription;  }  /**   * a-like as {@link #toString() }   *   * @return an XML representation of element   */  @Override  public DefaultElement toElement() {    // QName lElementDecl = new QName("Category", mNamespace);    DefaultElement lReturnElement = new DefaultElement("Category");    // Attribute= a=new Attribute("", mCatName)    lReturnElement.add(new DefaultAttribute("ID", getEntityiD()));    lReturnElement.add(new DefaultAttribute("name", getCatName()));    lReturnElement.add(new DefaultAttribute("description", getDescription()));    return lReturnElement;  }  @Override  void formatAttributes() {    mCatName = escapeHtml(mCatName);    mDescription = escapeHtml(mDescription);  }  @Override  public int hashCode() {    return new HashCodeBuilder(15, 745).append(getCatName()).append(getDescription()).toHashCode();  }  @Override  public boolean equals(Object obj) {    if (obj == null) {      return false;    }    if (getClass() != obj.getClass()) {      return false;    }    final BlogCategory other = (BlogCategory) obj;    if (!Objects.equals(this.mCatName, other.mCatName)) {      return false;    }    return Objects.equals(this.mDescription, other.mDescription);  }  @Override  public String toString() {    return (this.mDescription == null) ? (mCatName)        : "Name: " + mCatName + " Description: " + mDescription;  }}