/* * Copyright (c) 2024 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * */package com.mor.blogengine.model;// ~--- non-JDK imports --------------------------------------------------------import static org.apache.commons.lang.StringEscapeUtils.escapeHtml;import java.io.Serial;import lombok.EqualsAndHashCode;import lombok.Getter;import lombok.Setter;import org.dom4j.tree.DefaultAttribute;import org.dom4j.tree.DefaultElement;/** * Object representing a blog comment. * * @author Laurent Morissette */@SuppressWarnings("unused")@Setter@Getter@EqualsAndHashCode(callSuper = true)public final class BlogComment extends AbstractBlogEntity {  @Serial private static final long serialVersionUID = -3684562856217228760L;  /** Comment author. */  private String author = null;  /** Comment text. -- GETTER -- text of comment */  private String commentText = null;  /** Comment date. */  private String date = null;  /** Comment parent entry id. -- GETTER -- */  private String entryId = null;  /** Commenter web page . */  private String webPage = null;  /**   * .   *   * @param element XML node to create a comment from   */  public BlogComment(final DefaultElement element) {    super();    setElement(element);    setDate(element.valueOf("@date"));    setAuthor(element.valueOf("@author"));    setWebPage(element.valueOf("@webPage"));    setCommentText(element.element("CommentText").getText());    setEntryId(element.valueOf("@entryID"));    formatAttributes();  }  /**   * Creates a new instance of blogComment.   *   * @param entry entry ID related to the comment   * @param commentDate date of comment   * @param commentAuthor author of the comment   * @param commentPage web page of the author of comment   * @param text text of comment   */  public BlogComment(      final String entry,      final String commentDate,      final String commentAuthor,      final String commentPage,      final String text) {    super();    setEntryId(entry);    setDate(commentDate);    setAuthor(commentAuthor);    setWebPage(commentPage);    setCommentText(text);    formatAttributes();  }  @Override  public DefaultElement toElement() {    // this is element Declaration in complete form.    DefaultElement lReturnElement;    DefaultElement lCommentText = new DefaultElement("CommentText");    lCommentText.addText(commentText);    lReturnElement = new DefaultElement("Comment");    // lReturnElement.add(mNamespace);    lReturnElement.add(new DefaultAttribute("entryID", getEntryId()));    lReturnElement.add(new DefaultAttribute("ID", getId()));    lReturnElement.add(new DefaultAttribute("date", date));    lReturnElement.add(new DefaultAttribute("author", author));    lReturnElement.add(new DefaultAttribute("webPage", webPage));    lReturnElement.add(lCommentText);    return lReturnElement;  }  @Override  void formatAttributes() {    author = escapeHtml(author);    commentText = escapeHtml(commentText);  }}